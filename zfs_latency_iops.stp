/* This script give you the latency and IOPS for major ZFS operation
 * Usage: 
 *   	  stap -v -d zfs zfs_latency_iops.stp <ALL:Read:Write:Open:Close?0:1:2:3:4> <Display Stats every n Sec>
 */

global probe_start=0

global close_hist
global open_hist
global read_hist
global write_hist

global read_t
global write_t
global open_t
global close_t

global read_c
global write_c
global open_c
global close_c

global rcnt=0;
global wcnt=0;
global open_cnt=0;
global close_cnt=0;
global first_wr_ts=0
global first_close_ts=0
global first_open_ts=0
global first_rd_ts=0
global last_wr_ts=0
global last_close_ts=0
global last_open_ts=0
global last_rd_ts=0

/* ======================= ZFS OPS ==============================*/
probe module("zfs").function("zpl_read")
{
	if(rcnt == 0) {
		first_rd_ts = gettimeofday_us();
		rcnt++;
	}
        read_t[tid()] = gettimeofday_us();
	read_c[tid()]++;
}

probe module("zfs").function("zpl_read").return
{
	last_rd_ts = gettimeofday_us();
        diff = last_rd_ts - read_t[tid()];
	read_c[tid()]++;
        read_hist <<< diff;
}

probe module("zfs").function("zpl_write")
{
	if(wcnt == 0) {
		first_wr_ts = gettimeofday_us();
		wcnt++;
	}
	
      	write_t[tid()] = gettimeofday_us();
	write_c[tid()]++;
}	

probe module("zfs").function("zpl_write").return
{

	last_wr_ts = gettimeofday_us();
      	diff = last_wr_ts - write_t[tid()];
	write_c[tid()]++;
	write_hist <<< diff;

}

probe module("zfs").function("zpl_release")
{
	if(close_cnt == 0) {
		first_close_ts = gettimeofday_us();
		close_cnt++;
	}
        close_t[tid()] = gettimeofday_us();
	close_c[tid()]++;
}

probe module("zfs").function("zpl_release").return
{
	last_close_ts = gettimeofday_us();
        diff = last_close_ts - close_t[tid()];
	close_c[tid()]++;
        close_hist <<< diff;
}

probe module("zfs").function("zpl_open")
{
	if(open_cnt == 0) {
		first_open_ts = gettimeofday_us();
		open_cnt++;
	}

	open_t[tid()] = gettimeofday_us();
	open_c[tid()]++;
}	

probe module("zfs").function("zpl_open").return
{
	last_open_ts = gettimeofday_us();
        diff = last_open_ts - open_t[tid()];
	open_c[tid()]++;
        open_hist <<< diff;
}

function stats:long() {
        intv=0;
        rd_throughput = wr_throughput = close_throughput = open_throughput = 0;
        intv = (gettimeofday_s() - probe_start);
        /* in us */
        wr_intv = (last_wr_ts - first_wr_ts );
        rd_intv = (last_rd_ts - first_rd_ts );
        o_intv = (last_open_ts - first_open_ts );
        c_intv = (last_close_ts - first_close_ts );

        printf("Run Interval %d secs[%s to %s]\n", intv, ctime(probe_start), ctime(gettimeofday_s()))

        foreach (thread_id in read_c)
                rd_throughput += read_c[thread_id]/2;

        foreach (thread_id in write_c)
                wr_throughput += write_c[thread_id]/2;

        foreach (thread_id in close_c)
                close_throughput += close_c[thread_id]/2;

        foreach (thread_id in open_c)
                open_throughput += open_c[thread_id]/2;

        if ( ( ($1 == 0) || ($1 == 3)) && @count(open_hist)) {
                printf("Open: Throughput --> %d IOPS\n", (open_throughput * 1000 * 1000)/o_intv);
                printf("=== Open: Latency    (min/avg/max) --> %d/%d/%d msec\n", @min(open_hist)/1000, @avg(open_hist)/1000, @max(open_hist)/1000);
                printf("us\n");
                print(@hist_log(open_hist))
        }

        if ( ( ($1 == 0) || ($1 == 1)) && @count(read_hist)) {
                printf("Read: Throughput --> %d IOPS\n", (rd_throughput * 1000 * 1000)/rd_intv);
                printf("Read: Latency    (min/avg/max) --> %d/%d/%d msec\n", @min(read_hist)/1000, @avg(read_hist)/1000, @max(read_hist)/1000);
                printf("us\n");
                print(@hist_log(read_hist))
        }

        if (( ($1 == 0) || ($1 == 2)) && @count(write_hist)) {
                printf("Write: Throughput --> %d IOPS\n", ((wr_throughput * 1000 * 1000)/wr_intv));
                printf("Write: Latency    (min/avg/max) --> %d/%d/%d msec\n", @min(write_hist)/1000, @avg(write_hist)/1000, @max(write_hist)/1000);
                printf("us\n");
                print(@hist_log(write_hist))
        }

        if (( ($1 == 0) || ($1 == 4)) && @count(close_hist)) {
                printf("Close: Throughput --> %d IOPS \n", (close_throughput * 1000 * 1000)/c_intv);
                printf("Close: Latency    (min/avg/max) --> %d/%d/%d msec\n", @min(close_hist)/1000, @avg(close_hist)/1000, @max(close_hist)/1000);
                printf("us\n");
                print(@hist_log(close_hist))
        }
}

probe timer.s($2) 
{
       stats()
}

function init:long() {
        delete close_hist;
        delete open_hist;
        delete read_hist;
        delete write_hist;
	delete read_t
	delete write_t
	delete open_t
	delete close_t

	delete read_c
	delete write_c
	delete open_c
	delete close_c
}

probe begin {
        # Start fresh
        init()

        # Keep an account of when the test was started
        probe_start =  (gettimeofday_s())

}

probe end 
{
     stats()
}

